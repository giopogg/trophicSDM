# delta_TSS = eval.table[which(eval.table$model=="tSDM" & eval.table$metric == "TSS" & eval.table$type == "bin" & eval.table$TL != 1),"value"] - eval.table[which(eval.table$model=="SDM" & eval.table$metric == "TSS" & eval.table$TL != 1),"value"]
# names(delta_TSS) = eval.table[which(eval.table$model=="SDM" & eval.table$metric == "R2" & eval.table$TL != 1),"species"]
#
# IntMat2=IntMat;IntMat2[lower.tri(PredMat, diag=TRUE)] <- 0
#
# BioticPress = colSums(IntMat2)[which(trophL[nameOrder]!=1)]
# BioticPress = rep(BioticPress,each=2)
# BioticPress = BioticPress[names(delta_R2)]
#
# cor.test(delta_R2,BioticPress)
# cor.test(delta_TSS,BioticPress)
# cor.test(delta_wass,BioticPress)
#
#
# if(!is.null(SIM$fundNiche)){
# BioticPress2 = sapply(spNewNames,
#                       function(spNewNames) transport::wasserstein1d(SIM$prob[,spNewNames],SIM$fundNiche[,spNewNames]))
# BioticPress2 = BioticPress2[nameOrder]
# names(BioticPress2) = spNames
# BioticPress2 = BioticPress2[which(trophL !=1)]
# BioticPress2 = rep(BioticPress2,each=2)
# BioticPress2 = BioticPress2[names(delta_R2)]
#
# cor.test(delta_R2,BioticPress2)
#
# cor.test(delta_wass,BioticPress2)
#
# cor.test(delta_TSS,BioticPress2)
#
# }
#
}
#### Random plots if you want to check something in particular
#
#
# # prob CV
# p1 = ggplot(data=eval.table[which(eval.table$metric=="wasserstein" &
#                                     eval.table$type %in% c("bin",FALSE) &
#                                     eval.table$CV=="train"),]) +
#   geom_point(aes(x=species,y=value,col=model,shape=model),size=4)+
#   geom_line(aes(x=species,y=value),arrow = arrow(length=unit(0.1,"cm"), ends="first", type = "closed"))+
#   ylab("Wass. distance from the niche") + theme_classic() + theme(legend.position="top",
#                                                                   axis.text.x= element_text(angle=45,vjust=0.5),
#                                                                   axis.title=element_text(size=16,face="bold"),
#                                                                   legend.title = element_text(size=16,face="bold"),
#                                                                   legend.text = element_text(size=16,face="bold"),
#   )
#
# p2 = ggplot(data=eval.table[which(eval.table$metric=="wasserstein" &
#                                     eval.table$type %in% c("bin",FALSE) &
#                                     !eval.table$CV &
#                                     eval.table$TL!=1),]) +
#   geom_boxplot(aes(y=value,col=model)) + theme_classic() + theme(legend.position = "top",
#                                                                  axis.title=element_text(size=16,face="bold"),
#                                                                  legend.title = element_text(size=16,face="bold"),
#                                                                  legend.text = element_text(size=16,face="bold"))
# ggarrange(p1,p2,align="h",widths = c(3,1))
#
######## Fundamental
for(i in which(knownFundNiche)){
SIM = SIMlist[[i]]
eval.table = SIM$eval.fund
### Plot Wassersetin distances
# no CV
p1 = ggplot(data=eval.table[which(eval.table$metric=="wasserstein" &
eval.table$CV=="train"),]) +
geom_point(aes(x=species,y=value,col=model,shape=model),size=4)+
geom_line(aes(x=species,y=value),arrow = arrow(length=unit(0.1,"cm"), ends="first", type = "closed"))+
ylab("Wass. distance from the niche") + theme_classic() + theme(legend.position="top",
axis.text.x= element_text(angle=45,vjust=0.5),
axis.title=element_text(size=16,face="bold"),
legend.title = element_text(size=16,face="bold"),
legend.text = element_text(size=16,face="bold"),
)
p2 = ggplot(data=eval.table[which(eval.table$metric=="wasserstein"  &
eval.table$CV=="train" &
eval.table$TL!=1),]) +
geom_boxplot(aes(y=value,col=model)) + theme_classic() + theme(legend.position = "top",
axis.title=element_text(size=16,face="bold"),
legend.title = element_text(size=16,face="bold"),
legend.text = element_text(size=16,face="bold"))
ggarrange(p1,p2,align="h",widths = c(3,1))
ggsave(filename=paste0(figPath,names(SIMlist)[i],"/",names(SIMlist)[i],"_wass_fund_train.pdf"),
width=20,height=10, dpi = 150, units = "in")
# CV
p1 = ggplot(data=eval.table[which(eval.table$metric=="wasserstein" &
eval.table$CV=="CV"),]) +
geom_point(aes(x=species,y=value,col=model,shape=model),size=4)+
geom_line(aes(x=species,y=value),arrow = arrow(length=unit(0.1,"cm"), ends="first", type = "closed"))+
ylab("Wass. distance from the niche") + theme_classic() + theme(legend.position="top",
axis.text.x= element_text(angle=45,vjust=0.5),
axis.title=element_text(size=16,face="bold"),
legend.title = element_text(size=16,face="bold"),
legend.text = element_text(size=16,face="bold"),
)
p2 = ggplot(data=eval.table[which(eval.table$metric=="wasserstein" &
eval.table$CV=="CV" &
eval.table$TL!=1),]) +
geom_boxplot(aes(y=value,col=model)) + theme_classic() + theme(legend.position = "top",
axis.title=element_text(size=16,face="bold"),
legend.title = element_text(size=16,face="bold"),
legend.text = element_text(size=16,face="bold"))
ggarrange(p1,p2,align="h",widths = c(3,1))
ggsave(filename=paste0(figPath,names(SIMlist)[i],"/",names(SIMlist)[i],"_wass_CV_bin.pdf"),
width=20,height=10, dpi = 150, units = "in")
###### All together
p = ggplot(eval.table[which(eval.table$TL != 1),]) +
geom_boxplot(aes(y=value, col = model)) + facet_grid(metric~CV, scale="free")  +
scale_fill_discrete(name="Type of covariates",
labels=c("binary","probability"),
type = c("#404040","#FFFFFF","#A0A0A0"),
breaks = c("bin","prob"))
ggsave(filename=paste0(figPath,names(SIMlist)[i],"/",names(SIMlist)[i],"_all_metrics_fund.pdf"),
width=10,height=15, dpi = 150, units = "in")
##### Interaction force versus quality of predictions
#
# delta_R2 = eval.table[which(eval.table$model=="tSDM" & eval.table$metric == "R2"  & eval.table$TL != 1),"value"] - eval.table[which(eval.table$model=="SDM" & eval.table$metric == "R2" & eval.table$TL != 1),"value"]
# names(delta_R2) = eval.table[which(eval.table$model=="SDM" & eval.table$metric == "R2" & eval.table$TL != 1),"species"]
# delta_wass = eval.table[which(eval.table$model=="tSDM" & eval.table$metric == "wasserstein" & eval.table$TL != 1),"value"] - eval.table[which(eval.table$model=="SDM" & eval.table$metric == "wasserstein" & eval.table$TL != 1),"value"]
# names(delta_wass) = eval.table[which(eval.table$model=="SDM"  & eval.table$TL != 1),"species"]
# delta_TSS = eval.table[which(eval.table$model=="tSDM" & eval.table$metric == "TSS" & eval.table$TL != 1),"value"] - eval.table[which(eval.table$model=="SDM" & eval.table$metric == "TSS" & eval.table$TL != 1),"value"]
# names(delta_TSS) = eval.table[which(eval.table$model=="SDM" & eval.table$metric == "R2" & eval.table$TL != 1),"species"]
#
# IntMat2=IntMat;IntMat2[lower.tri(PredMat, diag=TRUE)] <- 0
#
# BioticPress = colSums(IntMat2)[which(trophL[nameOrder]!=1)]
# BioticPress = rep(BioticPress,each=2)
# BioticPress = BioticPress[names(delta_R2)]
#
# cor.test(delta_R2,BioticPress)
# cor.test(delta_TSS,BioticPress)
# cor.test(delta_wass,BioticPress)
#
#
# if(!is.null(SIM$fundNiche)){
#   BioticPress2 = sapply(spNewNames,
#                         function(spNewNames) transport::wasserstein1d(SIM$prob[,spNewNames],SIM$fundNiche[,spNewNames]))
#   BioticPress2 = BioticPress2[nameOrder]
#   names(BioticPress2) = spNames
#   BioticPress2 = BioticPress2[which(trophL !=1)]
#   BioticPress2 = rep(BioticPress2,each=2)
#   BioticPress2 = BioticPress2[names(delta_R2)]
#
#   cor.test(delta_R2,BioticPress2)
#
#   cor.test(delta_wass,BioticPress2)
#
#   cor.test(delta_TSS,BioticPress2)
#
# }
#
}
######## Realised
for(i in 1:length(SIMlist)){
SIM = SIMlist[[i]]
eval.table = SIM$eval.realised
### Plot WAIC
# binary no CV
p1 = ggplot(data=eval.table[which(eval.table$metric=="waic"),]) +
geom_point(aes(x=species,y=value,col=model,shape=model),size=4)+
geom_line(aes(x=species,y=value),arrow = arrow(length=unit(0.1,"cm"), ends="first", type = "closed"))+
ylab("Wass. distance from the niche") + theme_classic() + theme(legend.position="top",
axis.text.x= element_text(angle=45,vjust=0.5),
axis.title=element_text(size=16,face="bold"),
legend.title = element_text(size=16,face="bold"),
legend.text = element_text(size=16,face="bold"),
)
p2 = ggplot(data=eval.table[which(eval.table$metric=="waic" &
eval.table$TL!=1),]) +
geom_boxplot(aes(y=value,col=model)) + theme_classic() + theme(legend.position = "top",
axis.title=element_text(size=16,face="bold"),
legend.title = element_text(size=16,face="bold"),
legend.text = element_text(size=16,face="bold"))
ggarrange(p1,p2,align="h",widths = c(3,1))
ggsave(filename=paste0(figPath,names(SIMlist)[i],"/",names(SIMlist)[i],"_waic.pdf"),
width=20,height=10, dpi = 150, units = "in")
### Plot Wassersetin distances
# binary no CV
p1 = ggplot(data=eval.table[which(eval.table$metric=="wasserstein" &
eval.table$type %in% c("bin",FALSE) &
eval.table$CV=="train"),]) +
geom_point(aes(x=species,y=value,col=model,shape=model),size=4)+
geom_line(aes(x=species,y=value),arrow = arrow(length=unit(0.1,"cm"), ends="first", type = "closed"))+
ylab("Wass. distance from the niche") + theme_classic() + theme(legend.position="top",
axis.text.x= element_text(angle=45,vjust=0.5),
axis.title=element_text(size=16,face="bold"),
legend.title = element_text(size=16,face="bold"),
legend.text = element_text(size=16,face="bold"),
)
p2 = ggplot(data=eval.table[which(eval.table$metric=="wasserstein" &
eval.table$type %in% c("bin",FALSE) &
eval.table$CV=="train" &
eval.table$TL!=1),]) +
geom_boxplot(aes(y=value,col=model)) + theme_classic() + theme(legend.position = "top",
axis.title=element_text(size=16,face="bold"),
legend.title = element_text(size=16,face="bold"),
legend.text = element_text(size=16,face="bold"))
ggarrange(p1,p2,align="h",widths = c(3,1))
ggsave(filename=paste0(figPath,names(SIMlist)[i],"/",names(SIMlist)[i],"_wass_train_bin.pdf"),
width=20,height=10, dpi = 150, units = "in")
# prob no CV
p1 = ggplot(data=eval.table[which(eval.table$metric=="wasserstein" &
eval.table$type %in% c("prob",FALSE) &
eval.table$CV=="train"),]) +
geom_point(aes(x=species,y=value,col=model,shape=model),size=4)+
geom_line(aes(x=species,y=value),arrow = arrow(length=unit(0.1,"cm"), ends="first", type = "closed"))+
ylab("Wass. distance from the niche") + theme_classic() + theme(legend.position="top",
axis.text.x= element_text(angle=45,vjust=0.5),
axis.title=element_text(size=16,face="bold"),
legend.title = element_text(size=16,face="bold"),
legend.text = element_text(size=16,face="bold"),
)
p2 = ggplot(data=eval.table[which(eval.table$metric=="wasserstein" &
eval.table$type %in% c("prob",FALSE) &
eval.table$CV=="train" &
eval.table$TL!=1),]) +
geom_boxplot(aes(y=value,col=model)) + theme_classic() + theme(legend.position = "top",
axis.title=element_text(size=16,face="bold"),
legend.title = element_text(size=16,face="bold"),
legend.text = element_text(size=16,face="bold"))
ggarrange(p1,p2,align="h",widths = c(3,1))
ggsave(filename=paste0(figPath,names(SIMlist)[i],"/",names(SIMlist)[i],"_wass_train_prob.pdf"),
width=20,height=10, dpi = 150, units = "in")
# bin CV
p1 = ggplot(data=eval.table[which(eval.table$metric=="wasserstein" &
eval.table$type %in% c("bin",FALSE) &
eval.table$CV=="CV"),]) +
geom_point(aes(x=species,y=value,col=model,shape=model),size=4)+
geom_line(aes(x=species,y=value),arrow = arrow(length=unit(0.1,"cm"), ends="first", type = "closed"))+
ylab("Wass. distance from the niche") + theme_classic() + theme(legend.position="top",
axis.text.x= element_text(angle=45,vjust=0.5),
axis.title=element_text(size=16,face="bold"),
legend.title = element_text(size=16,face="bold"),
legend.text = element_text(size=16,face="bold"),
)
p2 = ggplot(data=eval.table[which(eval.table$metric=="wasserstein" &
eval.table$type %in% c("bin",FALSE) &
eval.table$CV=="CV" &
eval.table$TL!=1),]) +
geom_boxplot(aes(y=value,col=model)) + theme_classic() + theme(legend.position = "top",
axis.title=element_text(size=16,face="bold"),
legend.title = element_text(size=16,face="bold"),
legend.text = element_text(size=16,face="bold"))
ggarrange(p1,p2,align="h",widths = c(3,1))
ggsave(filename=paste0(figPath,names(SIMlist)[i],"/",names(SIMlist)[i],"_wass_CV_bin.pdf"),
width=20,height=10, dpi = 150, units = "in")
# prob CV
p1 = ggplot(data=eval.table[which(eval.table$metric=="wasserstein" &
eval.table$type %in% c("prob",FALSE) &
eval.table$CV=="CV"),]) +
geom_point(aes(x=species,y=value,col=model,shape=model),size=4)+
geom_line(aes(x=species,y=value),arrow = arrow(length=unit(0.1,"cm"), ends="first", type = "closed"))+
ylab("Wass. distance from the niche") + theme_classic() + theme(legend.position="top",
axis.text.x= element_text(angle=45,vjust=0.5),
axis.title=element_text(size=16,face="bold"),
legend.title = element_text(size=16,face="bold"),
legend.text = element_text(size=16,face="bold"),
)
p2 = ggplot(data=eval.table[which(eval.table$metric=="wasserstein" &
eval.table$type %in% c("prob",FALSE) &
eval.table$CV=="CV" &
eval.table$TL!=1),]) +
geom_boxplot(aes(y=value,col=model)) + theme_classic() + theme(legend.position = "top",
axis.title=element_text(size=16,face="bold"),
legend.title = element_text(size=16,face="bold"),
legend.text = element_text(size=16,face="bold"))
ggarrange(p1,p2,align="h",widths = c(3,1))
ggsave(filename=paste0(figPath,names(SIMlist)[i],"/",names(SIMlist)[i],"_wass_CV_prob.pdf"),
width=20,height=10, dpi = 150, units = "in")
###### All together
p = ggplot(eval.table[which(eval.table$TL != 1),]) +
geom_boxplot(aes(y = value, col = model, x = model, fill = type),alpha=0.5) +
facet_grid(metric~CV, scale="free") +
scale_fill_discrete(name="Type of covariates",
labels=c("binary","probability"),
type = c("#404040","#FFFFFF","#A0A0A0"),
breaks = c("bin","prob"))
ggsave(filename=paste0(figPath,names(SIMlist)[i],"/",names(SIMlist)[i],"_all_metrics.pdf"),
width=10,height=15, dpi = 150, units = "in")
##### Interaction force versus quality of predictions
#
# delta_R2 = eval.table[which(eval.table$model=="tSDM" & eval.table$metric == "R2" & eval.table$type == "bin"  & eval.table$TL != 1),"value"] - eval.table[which(eval.table$model=="SDM" & eval.table$metric == "R2" & eval.table$TL != 1),"value"]
# names(delta_R2) = eval.table[which(eval.table$model=="SDM" & eval.table$metric == "R2" & eval.table$TL != 1),"species"]
# delta_wass = eval.table[which(eval.table$model=="tSDM" & eval.table$metric == "wasserstein" & eval.table$type == "bin" & eval.table$TL != 1),"value"] - eval.table[which(eval.table$model=="SDM" & eval.table$metric == "wasserstein" & eval.table$TL != 1),"value"]
# names(delta_wass) = eval.table[which(eval.table$model=="SDM" & eval.table$metric == "R2" & eval.table$TL != 1),"species"]
# delta_TSS = eval.table[which(eval.table$model=="tSDM" & eval.table$metric == "TSS" & eval.table$type == "bin" & eval.table$TL != 1),"value"] - eval.table[which(eval.table$model=="SDM" & eval.table$metric == "TSS" & eval.table$TL != 1),"value"]
# names(delta_TSS) = eval.table[which(eval.table$model=="SDM" & eval.table$metric == "R2" & eval.table$TL != 1),"species"]
#
# IntMat2=IntMat;IntMat2[lower.tri(PredMat, diag=TRUE)] <- 0
#
# BioticPress = colSums(IntMat2)[which(trophL[nameOrder]!=1)]
# BioticPress = rep(BioticPress,each=2)
# BioticPress = BioticPress[names(delta_R2)]
#
# cor.test(delta_R2,BioticPress)
# cor.test(delta_TSS,BioticPress)
# cor.test(delta_wass,BioticPress)
#
#
# if(!is.null(SIM$fundNiche)){
# BioticPress2 = sapply(spNewNames,
#                       function(spNewNames) transport::wasserstein1d(SIM$prob[,spNewNames],SIM$fundNiche[,spNewNames]))
# BioticPress2 = BioticPress2[nameOrder]
# names(BioticPress2) = spNames
# BioticPress2 = BioticPress2[which(trophL !=1)]
# BioticPress2 = rep(BioticPress2,each=2)
# BioticPress2 = BioticPress2[names(delta_R2)]
#
# cor.test(delta_R2,BioticPress2)
#
# cor.test(delta_wass,BioticPress2)
#
# cor.test(delta_TSS,BioticPress2)
#
# }
#
}
####### Jeremy: test of tSDM and SDMs on simulation data
rm(list=ls())
library(igraph)
library(Matrix)
library(cheddar)
library(cowplot)
library(GGally)
library(intergraph)
library(gridExtra)
library(dismo)
library(coda)
library(transport)
library(dplyr)
library(rstan)
library(rstanarm)
library(arm)
library(glmnet)
library(formula.tools)
library(abind)
library(brms)
library(stringr)
library(bayesplot)
library(parallel)
root= "/Users/poggiatg/Documents/GitHub/trophicSDM/VirtualEcoSim/"
setwd(root)
source("../tSDM_functions.R")
#################################################################################################
#### Test on simulated data
################################################################################################
#job=args[1]
#job=NA
simPath = "Simulations_S20L3_nEnv51_nRep50_strengthBI5_asy/"   # directory from which to load the simulations
S = as.numeric(gsub(".*S|L.*", "", simPath))                       # number of species
L = as.numeric(gsub(".*L|_nEnv.*", "", simPath))                   # number of trophic levels
nEnv = as.numeric(gsub(".*nEnv|_nRep.*", "", simPath))             # number of environments
nRep = as.numeric(gsub(".*nRep|_strengthBI.*", "", simPath))         # number of replicates
strengthBI = as.numeric(gsub(".*strengthBI|_asy.*", "", simPath)) # strength of biotic interactions
mergeReplicates = TRUE   # whether to merge the simulation replicates to train the models
nbMerge = 1                              # between 0 and 1, ratio of replicate to keep for fitting
linear = F                               # whether to include a quadratic term for X
fitPreds = F                             # whether to fit predators
if(!linear) poly=F                       # if yes, whether to take a raw polynomial (poly=T) or an orthogonal one (poly=F)
horsh=F
iter=5000
pred_samples=1000
figPath=paste0(simPath,"Fig/")
if(!dir.exists(figPath)) dir.create(figPath)
# Gather outputs in a single list
SIMlist = list()
# Check the simulation methods available (among "glvGR", "glvKbasal", "rickerKbasal", "soiER", "soiERbasal", "vc")
simMethods = gsub("_finalStates_abiotic|.csv", "", grep("finalStates", list.files(simPath), value = TRUE))
#simMethods = simMethods[1]
### loadData : the function that loads the simulated community datasets.
loadData <- function(filePath){
df.merged <- read.csv2(filePath, check.names = FALSE)
df.list <- lapply(unique(df.merged$datasets), function(i) {
df <- subset(df.merged, datasets == i, select = -c(datasets))
rownames(df) <- df$rowN
return(df[-(1:2)])
})
return(df.list)
}
### finalStatesToXY : the function that converts the simulated datasets into environment (X) and
#                     presence/absence (Y) matrices, for training and testing.
finalStatesToXY <- function(finalStates, nbMerge=1){
# Training dataset
finalStates.combineRep = Reduce(cbind, finalStates[1:round(length(finalStates)*nbMerge)])
Y = as.data.frame(t(finalStates.combineRep))
colnames(Y) = paste("Y", 1:ncol(Y), sep="")
X = cbind(1, X1=as.numeric(colnames(finalStates.combineRep)))
XY.train = list(X=X,Y=Y)
return(list(XY.train=XY.train))
}
checkCV = function(out = out, K = 5, nEnv){
X = out$X[1:nEnv,"X1"]
partition = rep(1:K,each = round(nEnv/K))
S = length(ncol(out$Y))
if(length(partition)<nEnv) partition = c(partition, rep(K,nEnv-length(partition)))
index_all = vector(length=nrow(out$X))
for(i in 1:K){
index_all[ which(out$X[,"X1"] %in% X[partition==i])] = i
}
# check for all training datasets
temp_check = vector(length = K)
for(i in 1:K){
# check if all species have at least one zero and one 1
temp_check[i] = any(apply(out$Y[index_all != i,],2,function(x) var(x) ==0))
}
return(!any(temp_check))
}
### Build the known graph
IntMat <- as.matrix(read.csv2(paste0(simPath, "InteractionMatrix.csv"), row.names = 1))  # matrix of species interactions
PredMat <- sign(IntMat) ; PredMat[lower.tri(PredMat, diag=TRUE)] <- 0                    # matrix of trophic links
spNames = colnames(PredMat)                                                         # species names
trophL = as.numeric(sub(pattern = "Sp.*TL", replacement = "", x = spNames))         # species trophic levels
Stroph = table(trophL)                                                              # number of species by trophic level
community <- Community(nodes=data.frame(node=spNames),
trophic.links=PredationMatrixToLinks(PredMat),
properties=list(title='Random community'))                   # cheddar community
dimnames(PredMat) <- list(paste0("Y", 1:S),paste0("Y", 1:S))
# Build the graph of trophic interactions from PredMat
G = graph_from_adjacency_matrix(t(PredMat))
#spNewNames = names(topo_sort(G,mode="in"))
spNewNames = V(G)[order(unlist(lapply(decompose(G), compute_TL_laplacian)), decreasing=T)]$name
save(spNewNames, file = paste0(simPath,"spNewNames.R"))
#options(repr.plot.width = 12, repr.plot.height = 3, repr.plot.res = 150)
#ggnet2(intergraph::asNetwork(G),arrow.gap = 0.05,arrow.size = 10,label=TRUE)+ggtitle("Known graph")
# Load niche optima used in the simulations
niche_optima <- read.csv2(paste0(simPath, "niche_optima.csv"))[[1]]
names(niche_optima) = paste0("Y", 1:S)
niche_optima = niche_optima[spNewNames]
niche_optima
K = ifelse(is.vector(niche_optima), 1, ncol(niche_optima))    # number of environmental variables
# Create formulas for the environmental part of each species
if(linear){
env.form=as.list(rep("~X1",S))
}else{
if(!poly){
env.form=as.list(rep("~X1+I(X1^2)",S))
}else{
env.form=as.list(rep("~poly(X1,2)",S))
}
}
env.form=lapply(env.form,FUN=as.formula)
names(env.form) = paste("Y", 1:S, sep="")
#Composite variables
#Instead of looking individual species interactions, integrate several species in a single composite variables, for example richness or diversity.
#sp.formula = "richness+richness^2"
#sp.formula = "richness"
#sp.partition = list(c("Y1","Y2"),c("Y3","Y4","Y5","Y6"))
#### GLV GR
if ("glvGR" %in% simMethods){
glv.finalStates.abioticGR <- loadData(paste0(simPath, "glv_finalStates_abioticGR.csv"))
head(glv.finalStates.abioticGR[[1]])
# Format the abiotic conditions (X) and biotic presence/absence (Y) matrices
if (mergeReplicates){out = finalStatesToXY(glv.finalStates.abioticGR, nbMerge = nbMerge)
}else{out = finalStatesToXY(glv.finalStates.abioticGR[1])}
check_data = checkCV(out$XY.train, K = 5, nEnv = nEnv)
if(check_data){
SIMlist$GLV_abioticGR = out$XY.train
# Construct an analogue of the coefficients matrix
SIMlist$GLV_abioticGR$B <- cbind(rep(c(1,-1),c(Stroph[1],S-Stroph[1])),
if (linear) 10*(niche_optima-0.5) else niche_optima)
# Estimate survival probabilities
SIMlist$GLV_abioticGR$survivalProba <- data.frame(t(Reduce("+", glv.finalStates.abioticGR)/nRep))
}else{
simMethods = simMethods[-which(simMethods=="glvGR")]
}
}
#### GLV GR K basal
if("glvKbasal" %in% simMethods){
glv.finalStates.abioticKbasal <- loadData(paste0(simPath, "glv_finalStates_abioticKbasal.csv"))
if(nRep != length(glv.finalStates.abioticKbasal)) warning("Wrong number of replicates: ", length(glv.finalStates.abioticKbasal), " instead of ", nRep)
head(glv.finalStates.abioticKbasal[[1]])
# Format the abiotic conditions (X) and biotic presence/absence (Y) matrices
if (mergeReplicates){out = finalStatesToXY(glv.finalStates.abioticKbasal, nbMerge = nbMerge)
}else{out = finalStatesToXY(glv.finalStates.abioticKbasal[1])}
check_data = checkCV(out$XY.train, K = 5, nEnv = nEnv)
if(check_data){
SIMlist$GLV_abioticKbasal = out$XY.train
# Construct an analogue of the coefficients matrix
SIMlist$GLV_abioticKbasal$B <- cbind(rep(c(1,-1),c(Stroph[1],S-Stroph[1])),
if (linear) 10*(niche_optima-0.5) else niche_optima)
# Estimate survival probabilities
SIMlist$GLV_abioticKbasal$survivalProba <- data.frame(t(Reduce("+", glv.finalStates.abioticKbasal)/nRep))
}else{
simMethods = simMethods[-which(simMethods=="glvKbasal")]
}
}
job="job_1"
paste0("Simulations_S20L3_nEnv51_nRep50_maxBI5_",job,"/")
#simPath = "Simulations_S20L3_nEnv51_nRep50_strengthBI5_asy/"   # directory from which to load the simulations
S = as.numeric(gsub(".*S|L.*", "", simPath))                       # number of species
L = as.numeric(gsub(".*L|_nEnv.*", "", simPath))                   # number of trophic levels
nEnv = as.numeric(gsub(".*nEnv|_nRep.*", "", simPath))             # number of environments
nRep = as.numeric(gsub(".*nRep|_strengthBI.*", "", simPath))         # number of replicates
strengthBI = as.numeric(gsub(".*strengthBI|_job.*", "", simPath)) # strength of biotic interactions
S
L
nEnv
nRep
strengthBI
nRep = as.numeric(gsub(".*nRep|_maxBI.*", "", simPath))         # number of replicates
nRep = as.numeric(gsub(".*nRep|_maxBI.*", "", simPath))         # number of replicates
simPath = paste0("Simulations_S20L3_nEnv51_nRep50_maxBI5_",job,"/")
#simPath = "Simulations_S20L3_nEnv51_nRep50_strengthBI5_asy/"   # directory from which to load the simulations
S = as.numeric(gsub(".*S|L.*", "", simPath))                       # number of species
L = as.numeric(gsub(".*L|_nEnv.*", "", simPath))                   # number of trophic levels
nEnv = as.numeric(gsub(".*nEnv|_nRep.*", "", simPath))             # number of environments
nRep = as.numeric(gsub(".*nRep|_maxBI.*", "", simPath))         # number of replicates
strengthBI = as.numeric(gsub(".*maxBI|_job.*", "", simPath)) # strength of biotic interactions
strengthBI
nRep
####### Jeremy: test of tSDM and SDMs on simulation data
rm(list=ls())
